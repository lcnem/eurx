// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: auction/auction.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_lcnem_eurx_types "github.com/lcnem/eurx/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BaseAuction struct {
	Id              uint64                                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	Initiator       string                                       `protobuf:"bytes,2,opt,name=initiator,proto3" json:"initiator,omitempty" yaml:"id"`
	Lot             types.Coin                                   `protobuf:"bytes,3,opt,name=lot,proto3" json:"lot" yaml:"lot"`
	Bidder          github_com_lcnem_eurx_types.StringAccAddress `protobuf:"bytes,4,opt,name=bidder,proto3,customtype=github.com/lcnem/eurx/types.StringAccAddress" json:"bidder" yaml:"bidder"`
	Bid             types.Coin                                   `protobuf:"bytes,5,opt,name=bid,proto3" json:"bid" yaml:"bid"`
	HasReceivedBids bool                                         `protobuf:"varint,6,opt,name=has_received_bids,json=hasReceivedBids,proto3" json:"has_received_bids,omitempty" yaml:"has_reeceived_bids"`
	EndTime         time.Time                                    `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	MaxEndTime      time.Time                                    `protobuf:"bytes,8,opt,name=max_end_time,json=maxEndTime,proto3,stdtime" json:"max_end_time" yaml:"max_end_time"`
}

func (m *BaseAuction) Reset()         { *m = BaseAuction{} }
func (m *BaseAuction) String() string { return proto.CompactTextString(m) }
func (*BaseAuction) ProtoMessage()    {}
func (*BaseAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{0}
}
func (m *BaseAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseAuction.Merge(m, src)
}
func (m *BaseAuction) XXX_Size() int {
	return m.Size()
}
func (m *BaseAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseAuction.DiscardUnknown(m)
}

var xxx_messageInfo_BaseAuction proto.InternalMessageInfo

func (m *BaseAuction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BaseAuction) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *BaseAuction) GetLot() types.Coin {
	if m != nil {
		return m.Lot
	}
	return types.Coin{}
}

func (m *BaseAuction) GetBid() types.Coin {
	if m != nil {
		return m.Bid
	}
	return types.Coin{}
}

func (m *BaseAuction) GetHasReceivedBids() bool {
	if m != nil {
		return m.HasReceivedBids
	}
	return false
}

func (m *BaseAuction) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *BaseAuction) GetMaxEndTime() time.Time {
	if m != nil {
		return m.MaxEndTime
	}
	return time.Time{}
}

type SurplusAuction struct {
	BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction" yaml:"base_auction"`
}

func (m *SurplusAuction) Reset()         { *m = SurplusAuction{} }
func (m *SurplusAuction) String() string { return proto.CompactTextString(m) }
func (*SurplusAuction) ProtoMessage()    {}
func (*SurplusAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{1}
}
func (m *SurplusAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SurplusAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SurplusAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SurplusAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurplusAuction.Merge(m, src)
}
func (m *SurplusAuction) XXX_Size() int {
	return m.Size()
}
func (m *SurplusAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_SurplusAuction.DiscardUnknown(m)
}

var xxx_messageInfo_SurplusAuction proto.InternalMessageInfo

type DebtAuction struct {
	BaseAuction       `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction" yaml:"base_auction"`
	CorrespondingDebt types.Coin `protobuf:"bytes,2,opt,name=corresponding_debt,json=correspondingDebt,proto3" json:"corresponding_debt" yaml:"corresponding_debt"`
}

func (m *DebtAuction) Reset()         { *m = DebtAuction{} }
func (m *DebtAuction) String() string { return proto.CompactTextString(m) }
func (*DebtAuction) ProtoMessage()    {}
func (*DebtAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{2}
}
func (m *DebtAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebtAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebtAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebtAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebtAuction.Merge(m, src)
}
func (m *DebtAuction) XXX_Size() int {
	return m.Size()
}
func (m *DebtAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_DebtAuction.DiscardUnknown(m)
}

var xxx_messageInfo_DebtAuction proto.InternalMessageInfo

func (m *DebtAuction) GetCorrespondingDebt() types.Coin {
	if m != nil {
		return m.CorrespondingDebt
	}
	return types.Coin{}
}

type CollateralAuction struct {
	BaseAuction       `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction" yaml:"base_auction"`
	CorrespondingDebt types.Coin        `protobuf:"bytes,2,opt,name=corresponding_debt,json=correspondingDebt,proto3" json:"corresponding_debt" yaml:"corresponding_debt"`
	MaxBid            types.Coin        `protobuf:"bytes,3,opt,name=max_bid,json=maxBid,proto3" json:"max_bid" yaml:"max_bid"`
	LotReturns        WeightedAddresses `protobuf:"bytes,4,opt,name=lot_returns,json=lotReturns,proto3" json:"lot_returns" yaml:"lot_returns"`
}

func (m *CollateralAuction) Reset()         { *m = CollateralAuction{} }
func (m *CollateralAuction) String() string { return proto.CompactTextString(m) }
func (*CollateralAuction) ProtoMessage()    {}
func (*CollateralAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{3}
}
func (m *CollateralAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralAuction.Merge(m, src)
}
func (m *CollateralAuction) XXX_Size() int {
	return m.Size()
}
func (m *CollateralAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralAuction.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralAuction proto.InternalMessageInfo

func (m *CollateralAuction) GetCorrespondingDebt() types.Coin {
	if m != nil {
		return m.CorrespondingDebt
	}
	return types.Coin{}
}

func (m *CollateralAuction) GetMaxBid() types.Coin {
	if m != nil {
		return m.MaxBid
	}
	return types.Coin{}
}

func (m *CollateralAuction) GetLotReturns() WeightedAddresses {
	if m != nil {
		return m.LotReturns
	}
	return WeightedAddresses{}
}

type WeightedAddresses struct {
	Addresses []github_com_lcnem_eurx_types.StringAccAddress `protobuf:"bytes,1,rep,name=addresses,proto3,customtype=github.com/lcnem/eurx/types.StringAccAddress" json:"addresses" yaml:"addresses"`
	Weights   []github_com_cosmos_cosmos_sdk_types.Int       `protobuf:"bytes,2,rep,name=weights,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"weights" yaml:"weights"`
}

func (m *WeightedAddresses) Reset()         { *m = WeightedAddresses{} }
func (m *WeightedAddresses) String() string { return proto.CompactTextString(m) }
func (*WeightedAddresses) ProtoMessage()    {}
func (*WeightedAddresses) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{4}
}
func (m *WeightedAddresses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedAddresses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedAddresses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedAddresses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedAddresses.Merge(m, src)
}
func (m *WeightedAddresses) XXX_Size() int {
	return m.Size()
}
func (m *WeightedAddresses) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedAddresses.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedAddresses proto.InternalMessageInfo

type MsgPlaceBid struct {
	AuctionId uint64                                       `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	Bidder    github_com_lcnem_eurx_types.StringAccAddress `protobuf:"bytes,2,opt,name=bidder,proto3,customtype=github.com/lcnem/eurx/types.StringAccAddress" json:"bidder" yaml:"bidder"`
	Amount    types.Coin                                   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"amount"`
}

func (m *MsgPlaceBid) Reset()         { *m = MsgPlaceBid{} }
func (m *MsgPlaceBid) String() string { return proto.CompactTextString(m) }
func (*MsgPlaceBid) ProtoMessage()    {}
func (*MsgPlaceBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{5}
}
func (m *MsgPlaceBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPlaceBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPlaceBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPlaceBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPlaceBid.Merge(m, src)
}
func (m *MsgPlaceBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgPlaceBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPlaceBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPlaceBid proto.InternalMessageInfo

func (m *MsgPlaceBid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *MsgPlaceBid) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type Params struct {
	MaxAuctionDuration  time.Duration                          `protobuf:"bytes,1,opt,name=max_auction_duration,json=maxAuctionDuration,proto3,stdduration" json:"max_auction_duration" yaml:"max_auction_duration"`
	BidDuration         time.Duration                          `protobuf:"bytes,2,opt,name=bid_duration,json=bidDuration,proto3,stdduration" json:"bid_duration" yaml:"bid_duration"`
	IncrementSurplus    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=increment_surplus,json=incrementSurplus,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"increment_surplus" yaml:"increment_surplus"`
	IncrementDebt       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=increment_debt,json=incrementDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"increment_debt" yaml:"increment_debt"`
	IncrementCollateral github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=increment_collateral,json=incrementCollateral,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"increment_collateral" yaml:"increment_collateral"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3dc552ee3b806a8, []int{6}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxAuctionDuration() time.Duration {
	if m != nil {
		return m.MaxAuctionDuration
	}
	return 0
}

func (m *Params) GetBidDuration() time.Duration {
	if m != nil {
		return m.BidDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*BaseAuction)(nil), "eurx.auction.BaseAuction")
	proto.RegisterType((*SurplusAuction)(nil), "eurx.auction.SurplusAuction")
	proto.RegisterType((*DebtAuction)(nil), "eurx.auction.DebtAuction")
	proto.RegisterType((*CollateralAuction)(nil), "eurx.auction.CollateralAuction")
	proto.RegisterType((*WeightedAddresses)(nil), "eurx.auction.WeightedAddresses")
	proto.RegisterType((*MsgPlaceBid)(nil), "eurx.auction.MsgPlaceBid")
	proto.RegisterType((*Params)(nil), "eurx.auction.Params")
}

func init() { proto.RegisterFile("auction/auction.proto", fileDescriptor_e3dc552ee3b806a8) }

var fileDescriptor_e3dc552ee3b806a8 = []byte{
	// 947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcf, 0x6f, 0xdb, 0x36,
	0x14, 0x8e, 0x9c, 0xcc, 0x89, 0xe9, 0x24, 0xad, 0xd9, 0x64, 0x50, 0x1d, 0xd4, 0xf2, 0x08, 0x6c,
	0x33, 0xb0, 0x4d, 0x42, 0xbb, 0x9d, 0x76, 0xe9, 0xa2, 0xa6, 0x58, 0x53, 0xa0, 0x40, 0xa1, 0x0e,
	0x18, 0x50, 0x2c, 0x30, 0x28, 0x91, 0x55, 0xb8, 0x4a, 0xa2, 0x21, 0xd2, 0xad, 0x73, 0xdb, 0x75,
	0xb7, 0x1e, 0xf7, 0xa7, 0xec, 0x4f, 0xe8, 0x6e, 0xb9, 0xed, 0xc7, 0x41, 0x1b, 0x92, 0xeb, 0x4e,
	0xfe, 0x0b, 0x06, 0x8a, 0x94, 0xe4, 0x3a, 0xc3, 0xb2, 0x0c, 0xd8, 0x0e, 0x3b, 0xc9, 0x24, 0xdf,
	0xfb, 0xbe, 0xc7, 0xc7, 0x8f, 0x1f, 0x0d, 0x76, 0xf1, 0x34, 0x92, 0x8c, 0x67, 0x9e, 0xf9, 0xba,
	0x93, 0x9c, 0x4b, 0x0e, 0x37, 0xbf, 0x9e, 0x9c, 0xcc, 0x5c, 0x33, 0xd7, 0xdf, 0x89, 0x79, 0xcc,
	0xcb, 0x05, 0x4f, 0xfd, 0xd2, 0x31, 0x7d, 0x27, 0xe6, 0x3c, 0x4e, 0xa8, 0x57, 0x8e, 0xc2, 0xe9,
	0x33, 0x4f, 0xb2, 0x94, 0x0a, 0x89, 0xd3, 0x89, 0x09, 0x18, 0x2c, 0x07, 0x90, 0x69, 0x8e, 0x1b,
	0x92, 0xfe, 0x20, 0xe2, 0x22, 0xe5, 0xc2, 0x0b, 0xb1, 0xa0, 0xde, 0x8b, 0xdb, 0x21, 0x95, 0xf8,
	0xb6, 0x17, 0x71, 0x66, 0xd6, 0xd1, 0xf7, 0x6b, 0xa0, 0xeb, 0x63, 0x41, 0xf7, 0x75, 0x19, 0xf0,
	0x16, 0x68, 0x31, 0x62, 0x5b, 0x43, 0x6b, 0xb4, 0xe6, 0x6f, 0xcd, 0x0b, 0xa7, 0x73, 0x82, 0xd3,
	0xe4, 0x53, 0xc4, 0x08, 0x0a, 0x5a, 0x8c, 0xc0, 0x0f, 0x40, 0x87, 0x65, 0x4c, 0x32, 0x2c, 0x79,
	0x6e, 0xb7, 0x86, 0xd6, 0xa8, 0xb3, 0x1c, 0xd5, 0xac, 0xc3, 0xbb, 0x60, 0x35, 0xe1, 0xd2, 0x5e,
	0x1d, 0x5a, 0xa3, 0xee, 0x9d, 0x9b, 0xae, 0xae, 0xc4, 0x55, 0x95, 0xb8, 0xa6, 0x12, 0xf7, 0x1e,
	0x67, 0x99, 0x0f, 0x5f, 0x17, 0xce, 0xca, 0xbc, 0x70, 0x80, 0x46, 0x49, 0xb8, 0x44, 0x81, 0xca,
	0x84, 0x47, 0xa0, 0x1d, 0x32, 0x42, 0x68, 0x6e, 0xaf, 0x95, 0x54, 0xf7, 0x55, 0xe0, 0x2f, 0x85,
	0xf3, 0x61, 0xcc, 0xe4, 0xf1, 0x34, 0x74, 0x23, 0x9e, 0x7a, 0x49, 0x94, 0xd1, 0xd4, 0x53, 0xad,
	0xf4, 0xe4, 0xc9, 0x84, 0x0a, 0xf7, 0x89, 0xcc, 0x59, 0x16, 0xef, 0x47, 0xd1, 0x3e, 0x21, 0x39,
	0x15, 0x62, 0x5e, 0x38, 0x5b, 0x1a, 0x58, 0x63, 0xa1, 0xc0, 0x80, 0xaa, 0xfa, 0x42, 0x46, 0xec,
	0xb7, 0xae, 0x58, 0x5f, 0xa8, 0xb6, 0xa9, 0x32, 0xe1, 0x21, 0xe8, 0x1d, 0x63, 0x31, 0xce, 0x69,
	0x44, 0xd9, 0x0b, 0x4a, 0xc6, 0x21, 0x23, 0xc2, 0x6e, 0x0f, 0xad, 0xd1, 0x86, 0x7f, 0x6b, 0x5e,
	0x38, 0x37, 0x75, 0xbc, 0x0e, 0x59, 0x8c, 0x41, 0xc1, 0xb5, 0x63, 0x2c, 0x02, 0x33, 0xe5, 0x33,
	0x22, 0x60, 0x00, 0x36, 0x68, 0x46, 0xc6, 0xea, 0x78, 0xed, 0xf5, 0xb2, 0xa0, 0xbe, 0xab, 0x8f,
	0xd6, 0xad, 0x8e, 0xd6, 0xfd, 0xa2, 0x3a, 0x7b, 0x7f, 0xcf, 0x54, 0x74, 0x4d, 0x33, 0x54, 0x99,
	0xe8, 0xd5, 0xaf, 0x8e, 0x15, 0xac, 0xd3, 0x8c, 0xa8, 0x50, 0x78, 0x04, 0x36, 0x53, 0x3c, 0x1b,
	0xd7, 0xb8, 0x1b, 0x97, 0xe2, 0x3a, 0x06, 0xf7, 0x86, 0xc6, 0x5d, 0xcc, 0xd6, 0xd8, 0x20, 0xc5,
	0xb3, 0xfb, 0x1a, 0x1e, 0x71, 0xb0, 0xfd, 0x64, 0x9a, 0x4f, 0x92, 0xa9, 0xa8, 0xc4, 0x73, 0x04,
	0x36, 0x55, 0xf7, 0xc6, 0x46, 0xd3, 0xa5, 0x8c, 0x54, 0x67, 0x17, 0x85, 0xee, 0x2e, 0xa8, 0x4d,
	0xf3, 0x9d, 0x16, 0x8e, 0xd5, 0x70, 0x2e, 0x02, 0xa0, 0xa0, 0x1b, 0x36, 0xd1, 0xe8, 0x67, 0x0b,
	0x74, 0x0f, 0x68, 0x28, 0xff, 0x1b, 0x3a, 0xf8, 0x1c, 0xc0, 0x88, 0xe7, 0x39, 0x15, 0x13, 0x9e,
	0x11, 0x96, 0xc5, 0x63, 0x42, 0x43, 0x59, 0x8a, 0xfe, 0x2f, 0xd5, 0xf2, 0x8e, 0xe9, 0xa1, 0x39,
	0xfd, 0x8b, 0x10, 0x28, 0xe8, 0xbd, 0x31, 0xa9, 0xb6, 0x84, 0xbe, 0x5d, 0x05, 0xbd, 0x7b, 0x3c,
	0x49, 0xb0, 0xa4, 0x39, 0x4e, 0xfe, 0x87, 0x3b, 0x84, 0x0f, 0xc1, 0xba, 0xd2, 0x93, 0xba, 0x71,
	0x97, 0x3a, 0xc2, 0xdb, 0x86, 0x61, 0xbb, 0xd1, 0x61, 0x79, 0xeb, 0xda, 0x29, 0x9e, 0xf9, 0x8c,
	0xc0, 0xaf, 0x40, 0x37, 0xe1, 0x72, 0x9c, 0x53, 0x39, 0xcd, 0x33, 0x51, 0xba, 0x43, 0xf7, 0x8e,
	0xf3, 0x66, 0x5b, 0xbe, 0xa4, 0x2c, 0x3e, 0x96, 0x94, 0x18, 0x1b, 0xa0, 0xc2, 0xef, 0x1b, 0x54,
	0x58, 0xfb, 0x4c, 0x85, 0x80, 0x02, 0x90, 0x70, 0x19, 0x98, 0xc1, 0x8f, 0x16, 0xe8, 0x5d, 0xc8,
	0x86, 0xcf, 0x40, 0x07, 0x57, 0x03, 0xdb, 0x1a, 0xae, 0x8e, 0x3a, 0xfe, 0x83, 0x7f, 0xe8, 0x47,
	0xd7, 0x75, 0x01, 0x35, 0x1c, 0x0a, 0x1a, 0x68, 0xf8, 0x14, 0xac, 0xbf, 0x2c, 0xc9, 0x85, 0xdd,
	0x2a, 0x59, 0x3e, 0x33, 0x2c, 0xef, 0x2d, 0xb0, 0x18, 0x57, 0xd7, 0x9f, 0x8f, 0x04, 0x79, 0x6e,
	0xc8, 0x0e, 0x33, 0xd9, 0xb4, 0xcd, 0xc0, 0xa0, 0xa0, 0x02, 0x44, 0xbf, 0x5b, 0xa0, 0xfb, 0x48,
	0xc4, 0x8f, 0x13, 0x1c, 0x51, 0xd5, 0xc7, 0x4f, 0x00, 0x30, 0xed, 0x1a, 0xd7, 0xae, 0xbf, 0x3b,
	0x2f, 0x9c, 0x9e, 0x29, 0xb0, 0x5e, 0x53, 0x15, 0xea, 0xc1, 0x21, 0x59, 0xb0, 0xe5, 0xd6, 0xbf,
	0x61, 0xcb, 0x0f, 0x40, 0x1b, 0xa7, 0x7c, 0x9a, 0xfd, 0x8d, 0x97, 0x63, 0xd7, 0x9c, 0xa8, 0x41,
	0xd2, 0x69, 0x28, 0x30, 0xf9, 0xe8, 0x87, 0x35, 0xd0, 0x7e, 0x8c, 0x73, 0x9c, 0x0a, 0x28, 0xc1,
	0x8e, 0x52, 0x51, 0xb5, 0xa3, 0xea, 0x95, 0xac, 0x6f, 0xd4, 0xb2, 0x27, 0x1e, 0x98, 0x00, 0xff,
	0x7d, 0x43, 0xb1, 0xd7, 0x48, 0x71, 0x19, 0x04, 0x7d, 0xa7, 0xac, 0x11, 0xa6, 0x78, 0x66, 0x2e,
	0x56, 0x95, 0x5c, 0xde, 0x5f, 0x46, 0x1a, 0xb6, 0xd6, 0x65, 0x6c, 0x4b, 0x06, 0xbc, 0x98, 0xac,
	0x59, 0xba, 0x21, 0x23, 0x35, 0xfc, 0x4b, 0xd0, 0x63, 0x59, 0x94, 0xd3, 0x94, 0x66, 0x72, 0x2c,
	0xb4, 0x17, 0x97, 0x4d, 0xeb, 0xf8, 0x0f, 0xaf, 0x20, 0x9a, 0x03, 0x1a, 0xcd, 0x0b, 0xc7, 0x36,
	0x6f, 0xf8, 0x32, 0x20, 0x0a, 0xae, 0xd7, 0x73, 0xc6, 0xef, 0x61, 0x06, 0xb6, 0x9b, 0xb8, 0xd2,
	0x34, 0xf4, 0x03, 0xfd, 0xf9, 0x95, 0x59, 0x77, 0x97, 0x59, 0xb5, 0x7f, 0x6c, 0xd5, 0x13, 0xa5,
	0x77, 0x7c, 0x63, 0x81, 0x9d, 0x26, 0x24, 0xaa, 0x7d, 0xb2, 0x7c, 0xbb, 0x3b, 0xfe, 0xa3, 0x2b,
	0xd3, 0xee, 0x2d, 0xd3, 0x36, 0x98, 0x28, 0xb8, 0x51, 0x4f, 0x37, 0x8e, 0xec, 0xdf, 0x7d, 0x7d,
	0x36, 0xb0, 0x4e, 0xcf, 0x06, 0xd6, 0x6f, 0x67, 0x03, 0xeb, 0xd5, 0xf9, 0x60, 0xe5, 0xf4, 0x7c,
	0xb0, 0xf2, 0xd3, 0xf9, 0x60, 0xe5, 0xe9, 0xbb, 0x7f, 0x2e, 0xfb, 0x59, 0xf5, 0x77, 0x4f, 0x13,
	0x87, 0xed, 0xf2, 0xb4, 0x3f, 0xfe, 0x23, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x8e, 0xd4, 0x39, 0x0e,
	0x0a, 0x00, 0x00,
}

func (m *BaseAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.MaxEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.MaxEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintAuction(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAuction(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if m.HasReceivedBids {
		i--
		if m.HasReceivedBids {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Bidder.Size()
		i -= size
		if _, err := m.Bidder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Lot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SurplusAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurplusAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SurplusAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DebtAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebtAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebtAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CorrespondingDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CollateralAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LotReturns.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MaxBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.CorrespondingDebt.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WeightedAddresses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedAddresses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedAddresses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Weights[iNdEx].Size()
				i -= size
				if _, err := m.Weights[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Addresses[iNdEx].Size()
				i -= size
				if _, err := m.Addresses[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintAuction(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgPlaceBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPlaceBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPlaceBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Bidder.Size()
		i -= size
		if _, err := m.Bidder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AuctionId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IncrementCollateral.Size()
		i -= size
		if _, err := m.IncrementCollateral.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.IncrementDebt.Size()
		i -= size
		if _, err := m.IncrementDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.IncrementSurplus.Size()
		i -= size
		if _, err := m.IncrementSurplus.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n13, err13 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.BidDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.BidDuration):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintAuction(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x12
	n14, err14 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.MaxAuctionDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxAuctionDuration):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintAuction(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Lot.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.Bidder.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.Bid.Size()
	n += 1 + l + sovAuction(uint64(l))
	if m.HasReceivedBids {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.MaxEndTime)
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *SurplusAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseAuction.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *DebtAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseAuction.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.CorrespondingDebt.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *CollateralAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseAuction.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.CorrespondingDebt.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MaxBid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.LotReturns.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *WeightedAddresses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovAuction(uint64(l))
		}
	}
	return n
}

func (m *MsgPlaceBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovAuction(uint64(m.AuctionId))
	}
	l = m.Bidder.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.MaxAuctionDuration)
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.BidDuration)
	n += 1 + l + sovAuction(uint64(l))
	l = m.IncrementSurplus.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.IncrementDebt.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.IncrementCollateral.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bidder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasReceivedBids", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasReceivedBids = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.MaxEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurplusAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurplusAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurplusAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebtAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebtAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebtAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrespondingDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CorrespondingDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollateralAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CorrespondingDebt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CorrespondingDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotReturns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LotReturns.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedAddresses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedAddresses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedAddresses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_lcnem_eurx_types.StringAccAddress
			m.Addresses = append(m.Addresses, v)
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Weights = append(m.Weights, v)
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPlaceBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPlaceBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPlaceBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bidder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAuctionDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.MaxAuctionDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.BidDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementSurplus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementSurplus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncrementCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncrementCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
